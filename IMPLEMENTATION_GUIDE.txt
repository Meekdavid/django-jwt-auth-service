🔧 Django JWT Authentication Service - Implementation Guide
================================================================

📋 TABLE OF CONTENTS
====================
1. Rate Limiting Implementation
2. Redis-based Password Reset System
3. JWT Token Management
4. Custom Throttling Classes
5. Security Features Overview
6. Database Integration
7. API Documentation Setup

═══════════════════════════════════════════════════════════════

1. 🚦 RATE LIMITING IMPLEMENTATION
==================================

📍 Location: auth_service/utils/throttles.py

The project implements sophisticated rate limiting using django-ratelimit and custom throttling classes:

🔹 Custom Throttle Classes:
   - EmailRateThrottle: Base class for email-based rate limiting
   - LoginRateThrottle: 5 attempts per minute per IP/email
   - PasswordResetRateThrottle: 3 attempts per minute per IP/email
   - RegistrationRateThrottle: 10 attempts per hour per IP
   - PasswordResetCompletionRateThrottle: 10 attempts per hour per IP

🔹 Implementation Details:
   - Uses Redis for distributed rate limiting across multiple server instances
   - Combines IP address and email for more granular control
   - Custom cache key generation for flexible throttling strategies
   - Graceful handling of Redis connection failures

🔹 Integration:
   - Applied via decorators in views.py: @ratelimit(key='ip', rate='5/m', method='POST')
   - DRF throttle classes applied in viewsets: throttle_classes = [LoginRateThrottle]
   - Rate limit headers included in API responses for client awareness

🔹 Testing:
   - Comprehensive test script: auth_service/scripts/test_rate_limiting.py
   - Automated test runners for Windows (.bat) and Linux/Mac (.sh)
   - Integration tests verify rate limiting across different endpoints

═══════════════════════════════════════════════════════════════

2. 🔐 REDIS-BASED PASSWORD RESET SYSTEM
=======================================

📍 Location: auth_service/utils/password_reset_service.py

Advanced password reset system using Redis for secure token storage:

🔹 Token Generation:
   - 32-byte URL-safe random tokens using secrets.token_urlsafe()
   - Cryptographically secure token generation
   - No predictable patterns or timing attacks

🔹 Redis Storage Strategy:
   - Tokens stored with 10-minute expiration
   - Key format: "password_reset:{token}"
   - Value contains user email for verification
   - Automatic cleanup via Redis TTL

🔹 Security Features:
   - Single-use tokens (consumed after verification)
   - Time-limited validity (10 minutes)
   - Email verification before token creation
   - Rate limiting on reset requests
   - Secure token transmission

🔹 Implementation Flow:
   1. User requests password reset via email
   2. System validates email exists
   3. Generate secure token and store in Redis
   4. Send email with reset link (token included)
   5. User clicks link, token is verified and consumed
   6. New password is set, token is invalidated

🔹 Redis Integration:
   - Uses django-redis for seamless Django integration
   - Connection pooling for performance
   - Fallback handling for Redis unavailability
   - Configuration via REDIS_URL environment variable

═══════════════════════════════════════════════════════════════

3. 🎫 JWT TOKEN MANAGEMENT
==========================

📍 Location: accounts/views.py, auth_service/settings/base.py

Comprehensive JWT implementation using djangorestframework-simplejwt:

🔹 Token Configuration:
   - Access Token: 1-hour lifetime (configurable)
   - Refresh Token: 7-day lifetime (configurable)
   - Automatic token rotation on refresh
   - Token blacklisting for secure logout

🔹 Security Implementation:
   - HS256 algorithm for token signing
   - Configurable secret key rotation
   - Token expiration validation
   - Automatic refresh token rotation
   - Blacklist integration for revoked tokens

🔹 Custom Views:
   - LoginView: Custom authentication with rate limiting
   - LogoutView: Token blacklisting implementation
   - RefreshView: Secure token refresh with rotation
   - Protected endpoints with JWT verification

🔹 Token Storage:
   - Access tokens: Client-side storage (short-lived)
   - Refresh tokens: Secure HTTP-only cookies (recommended)
   - Blacklisted tokens: Database storage for verification

═══════════════════════════════════════════════════════════════

4. ⚙️ CUSTOM THROTTLING CLASSES
===============================

📍 Location: auth_service/utils/throttles.py

Advanced throttling system extending DRF's base throttling:

🔹 EmailRateThrottle (Base Class):
   - Combines IP address and email for unique identification
   - Handles missing email gracefully
   - Configurable rate limits per subclass
   - Redis-backed for distributed systems

🔹 Specialized Throttle Classes:
   
   🚪 LoginRateThrottle:
   - Rate: 5 attempts per minute
   - Scope: 'login'
   - Purpose: Prevent brute force attacks
   
   🔑 PasswordResetRateThrottle:
   - Rate: 3 attempts per minute
   - Scope: 'password_reset'
   - Purpose: Prevent reset spam attacks
   
   📝 RegistrationRateThrottle:
   - Rate: 10 attempts per hour
   - Scope: 'registration'
   - Purpose: Prevent account creation spam
   
   ✅ PasswordResetCompletionRateThrottle:
   - Rate: 10 attempts per hour
   - Scope: 'password_reset_completion'
   - Purpose: Prevent reset completion abuse

🔹 Cache Key Strategy:
   - Format: "throttle_{scope}_{ident}"
   - Unique identification per user/IP combination
   - Efficient Redis key management
   - Automatic expiration handling

═══════════════════════════════════════════════════════════════

5. 🛡️ SECURITY FEATURES OVERVIEW
================================

🔹 Authentication Security:
   - JWT token-based authentication
   - Secure password hashing (Django's PBKDF2)
   - Password strength validation
   - Email uniqueness enforcement

🔹 Rate Limiting Security:
   - Multi-layered rate limiting (IP + email)
   - Distributed rate limiting via Redis
   - Custom throttling classes per endpoint
   - Rate limit headers for client awareness

🔹 Password Reset Security:
   - Cryptographically secure token generation
   - Time-limited token validity (10 minutes)
   - Single-use token consumption
   - Email verification before reset

🔹 API Security:
   - CORS protection with whitelist domains
   - Request/response size limits
   - Input validation and sanitization
   - Error message sanitization

🔹 Infrastructure Security:
   - Environment variable protection
   - Secure headers implementation
   - Database connection security
   - Redis connection authentication

═══════════════════════════════════════════════════════════════

6. 🗄️ DATABASE INTEGRATION
==========================

🔹 Database Configuration:
   - PostgreSQL for production (Railway)
   - SQLite for development/testing
   - Environment-based database selection
   - Connection pooling and optimization

🔹 User Model:
   - Extended AbstractUser model
   - Email as primary identification
   - Additional fields: full_name, date_joined
   - Proper indexing for performance

🔹 Migrations:
   - Automatic migration generation
   - Version-controlled schema changes
   - Safe migration practices
   - Rollback capabilities

🔹 Token Blacklist:
   - Database storage for blacklisted tokens
   - Efficient querying with indexes
   - Automatic cleanup of expired entries
   - Integration with JWT validation

═══════════════════════════════════════════════════════════════

7. 📚 API DOCUMENTATION SETUP
=============================

🔹 Documentation Libraries:
   - drf-spectacular: Modern OpenAPI 3.0 schema generation
   - drf-yasg: Legacy Swagger 2.0 support
   - Custom schema extensions for authentication flows

🔹 Schema Customization:
   📍 accounts/helpers/spectacular_schemas.py:
   - Custom authentication flow schemas
   - Rate limiting documentation
   - Error response examples
   - Request/response schema definitions

🔹 Interactive Documentation:
   - Swagger UI: /swagger/ (interactive testing)
   - ReDoc: /redoc/ (clean documentation)
   - OpenAPI Schema: /api/schema/ (raw schema)

🔹 Authentication Documentation:
   - JWT token usage examples
   - Rate limiting information
   - Error code explanations
   - Testing endpoints documentation

═══════════════════════════════════════════════════════════════

🔧 DEVELOPMENT WORKFLOW
======================

1. 🏗️ Setting Up Development Environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Windows: venv\Scripts\activate
   pip install -r requirements.txt
   cp .env.example .env
   python manage.py migrate
   python manage.py runserver
   ```

2. 🧪 Testing Rate Limiting:
   ```bash
   # Start server
   python manage.py runserver
   
   # Run rate limiting tests
   python auth_service/scripts/test_rate_limiting.py
   ```

3. 🔄 Database Operations:
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   python manage.py createsuperuser
   ```

4. 📊 Running Tests:
   ```bash
   python manage.py test
   pytest --cov=accounts --cov=auth_service
   ```

═══════════════════════════════════════════════════════════════

📝 CONFIGURATION NOTES
======================

🔹 Environment Variables:
   - DATABASE_URL: PostgreSQL connection string
   - REDIS_URL: Redis connection string
   - SECRET_KEY: Django secret key
   - DEBUG: Debug mode (True/False)
   - ALLOWED_HOSTS: Comma-separated host list

🔹 Settings Structure:
   - base.py: Common settings
   - dev.py: Development overrides
   - prod.py: Production optimizations
   - railway.py: Railway-specific configuration

🔹 Rate Limiting Configuration:
   - Throttle rates configurable per environment
   - Redis connection fallback handling
   - Custom cache key generation
   - Rate limit header inclusion

═══════════════════════════════════════════════════════════════

🚀 DEPLOYMENT CONSIDERATIONS
============================

🔹 Railway Deployment:
   - Automatic PostgreSQL and Redis provisioning
   - Environment variable management
   - Automatic deployments on git push
   - Health check monitoring

🔹 Docker Deployment:
   - Multi-stage Docker builds for optimization
   - Environment-based configuration
   - Volume management for static files
   - Container health checks

🔹 Performance Optimization:
   - Redis connection pooling
   - Database query optimization
   - Static file serving optimization
   - Response caching strategies

═══════════════════════════════════════════════════════════════

End of Implementation Guide

For additional questions or clarifications, refer to:
- API Documentation: /swagger/ or /redoc/
- Source code comments in respective modules
- Test files for implementation examples
- Django and DRF official documentation
